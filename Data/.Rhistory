library("mapview")
library("plotly")
library("ggiraph")
library("survey")
library("srvyr")
?get_Acs
?get_acs()
tract_acs <- get_acs(geography = "county",
# variables = "B19013_001",
# state = "TX",
# county = "Tarrant",
geometry = TRUE,
year = 2022)
tract_acs <- get_acs(geography = "county",
variables = "B19013_001",
# state = "TX",
# county = "Tarrant",
geometry = TRUE,
year = 2022)
tract_acs <- get_acs(geography = "county",
variables = "B19013_001",
# state = "TX",
# county = "Tarrant",
geometry = TRUE,
year = 2021)
View(tract_acs)
rm(list = ls())
library(tidyverse)
library(tidycensus)
library(plm)
library(dplyr)
library(tigris)
library(sf)
library(spdep)
options(tigris_use_cache = TRUE)
# TABLES
# B01003: Total population
# B25001: Housing Units
# B19001: Household Income in the past 12 months
# B07009: Geographic mobility in the past year by educational attainment for current residences in the United States.
# B15003: Educational attainment for the population 25 years and over.
#
# Geography: Counties and places
# 1. List ACS variables
acs_var_list = load_variables(year = 2019, dataset = "acs1")
my_var_list = c(
total_population = "B01003_001",
civilian_employed_population = "B24080_001",
self_employed_men_unincorporated = "B24080_010",
self_employed_women_unincorporated = "B24080_020",
self_employed_median_earnings = "B24091_009",
total_poverty = "B17001_002",
ratio_income_poverty_sub_0.5 = "C17002_002",
ratio_income_poverty_0.5_0.99 = "C17002_003",
ratio_income_poverty_1_1.24 = "C17002_004",
ratio_income_poverty_1.25_1.49 = "C17002_005",
ratio_income_poverty_1.5_1.84 = "C17002_006",
ratio_income_poverty_1.85_1.99 = "C17002_007"
)
# Puma level
df_state = get_acs(
variables = my_var_list,
year = 2022,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2 = ratio_income_poverty_sub_0.5 +
ratio_income_poverty_0.5_0.99 + ratio_income_poverty_1_1.24 +
ratio_income_poverty_1.25_1.49 + ratio_income_poverty_1.5_1.84 +
ratio_income_poverty_1.85_1.99,
share_pop_ratio_income_poverty_sub_2 = ratio_income_poverty_sub_2/total_population,
self_emp_rate = (self_employed_men_unincorporated + self_employed_women_unincorporated)/civilian_employed_population,
year = 2022
)
df_state_old = get_acs(
variables = my_var_list,
year = 2021,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2 = ratio_income_poverty_sub_0.5 +
ratio_income_poverty_0.5_0.99 + ratio_income_poverty_1_1.24 +
ratio_income_poverty_1.25_1.49 + ratio_income_poverty_1.5_1.84 +
ratio_income_poverty_1.85_1.99,
share_pop_ratio_income_poverty_sub_2 = ratio_income_poverty_sub_2/total_population,
self_emp_rate = (self_employed_men_unincorporated + self_employed_women_unincorporated)/civilian_employed_population,
year = 2021
)
View(df_state_old)
rm(list = ls())
library(tidyverse)
library(tidycensus)
library(plm)
library(dplyr)
library(tigris)
library(sf)
library(spdep)
options(tigris_use_cache = TRUE)
# TABLES
# B01003: Total population
# B25001: Housing Units
# B19001: Household Income in the past 12 months
# B07009: Geographic mobility in the past year by educational attainment for current residences in the United States.
# B15003: Educational attainment for the population 25 years and over.
#
# Geography: Counties and places
# 1. List ACS variables
acs_var_list = load_variables(year = 2019, dataset = "acs1")
my_var_list = c(
total_population = "B01003_001",
civilian_employed_population = "B24080_001",
self_employed_men_unincorporated = "B24080_010",
self_employed_women_unincorporated = "B24080_020",
self_employed_median_earnings = "B24091_009",
total_poverty = "B17001_002",
ratio_income_poverty_sub_0.5 = "C17002_002",
ratio_income_poverty_0.5_0.99 = "C17002_003",
ratio_income_poverty_1_1.24 = "C17002_004",
ratio_income_poverty_1.25_1.49 = "C17002_005",
ratio_income_poverty_1.5_1.84 = "C17002_006",
ratio_income_poverty_1.85_1.99 = "C17002_007"
)
my_var_list_old = c(
total_population_lag = "B01003_001",
civilian_employed_population_lag = "B24080_001",
self_employed_men_unincorporated_lag = "B24080_010",
self_employed_women_unincorporated_lag = "B24080_020",
self_employed_median_earnings_lag = "B24091_009",
total_poverty_lag = "B17001_002",
ratio_income_poverty_sub_0.5_lag = "C17002_002",
ratio_income_poverty_0.5_0.99_lag = "C17002_003",
ratio_income_poverty_1_1.24_lag = "C17002_004",
ratio_income_poverty_1.25_1.49_lag = "C17002_005",
ratio_income_poverty_1.5_1.84_lag = "C17002_006",
ratio_income_poverty_1.85_1.99_lag = "C17002_007"
)
# Puma level
df_state = get_acs(
variables = my_var_list,
year = 2022,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2 = ratio_income_poverty_sub_0.5 +
ratio_income_poverty_0.5_0.99 + ratio_income_poverty_1_1.24 +
ratio_income_poverty_1.25_1.49 + ratio_income_poverty_1.5_1.84 +
ratio_income_poverty_1.85_1.99,
share_pop_ratio_income_poverty_sub_2 = ratio_income_poverty_sub_2/total_population,
self_emp_rate = (self_employed_men_unincorporated + self_employed_women_unincorporated)/civilian_employed_population,
year = 2022
)
df_state_old = get_acs(
variables = my_var_list_old,
year = 2021,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2_lag = ratio_income_poverty_sub_0.5_lag +
ratio_income_poverty_0.5_0.99_lag + ratio_income_poverty_1_1.24_lag +
ratio_income_poverty_1.25_1.49_lag + ratio_income_poverty_1.5_1.84_lag +
ratio_income_poverty_1.85_1.99_lag,
share_pop_ratio_income_poverty_sub_2_lag = ratio_income_poverty_sub_2_lag/total_population_lag,
self_emp_rate_lag = (self_employed_men_unincorporated_lag + self_employed_women_unincorporated_lag)/civilian_employed_population_lag,
year = 2021
)
View(df_state_old)
rm(list = ls())
library(tidyverse)
library(tidycensus)
library(plm)
library(dplyr)
library(tigris)
library(sf)
library(spdep)
options(tigris_use_cache = TRUE)
# TABLES
# B01003: Total population
# B25001: Housing Units
# B19001: Household Income in the past 12 months
# B07009: Geographic mobility in the past year by educational attainment for current residences in the United States.
# B15003: Educational attainment for the population 25 years and over.
#
# Geography: Counties and places
# 1. List ACS variables
acs_var_list = load_variables(year = 2019, dataset = "acs1")
my_var_list = c(
total_population = "B01003_001",
civilian_employed_population = "B24080_001",
self_employed_men_unincorporated = "B24080_010",
self_employed_women_unincorporated = "B24080_020",
self_employed_median_earnings = "B24091_009",
total_poverty = "B17001_002",
ratio_income_poverty_sub_0.5 = "C17002_002",
ratio_income_poverty_0.5_0.99 = "C17002_003",
ratio_income_poverty_1_1.24 = "C17002_004",
ratio_income_poverty_1.25_1.49 = "C17002_005",
ratio_income_poverty_1.5_1.84 = "C17002_006",
ratio_income_poverty_1.85_1.99 = "C17002_007"
)
my_var_list_old = c(
total_population_lag = "B01003_001",
civilian_employed_population_lag = "B24080_001",
self_employed_men_unincorporated_lag = "B24080_010",
self_employed_women_unincorporated_lag = "B24080_020",
self_employed_median_earnings_lag = "B24091_009",
total_poverty_lag = "B17001_002",
ratio_income_poverty_sub_0.5_lag = "C17002_002",
ratio_income_poverty_0.5_0.99_lag = "C17002_003",
ratio_income_poverty_1_1.24_lag = "C17002_004",
ratio_income_poverty_1.25_1.49_lag = "C17002_005",
ratio_income_poverty_1.5_1.84_lag = "C17002_006",
ratio_income_poverty_1.85_1.99_lag = "C17002_007"
)
# Puma level
df_state = get_acs(
variables = my_var_list,
year = 2022,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2 = ratio_income_poverty_sub_0.5 +
ratio_income_poverty_0.5_0.99 + ratio_income_poverty_1_1.24 +
ratio_income_poverty_1.25_1.49 + ratio_income_poverty_1.5_1.84 +
ratio_income_poverty_1.85_1.99,
share_pop_ratio_income_poverty_sub_2 = ratio_income_poverty_sub_2/total_population,
self_emp_rate = (self_employed_men_unincorporated + self_employed_women_unincorporated)/civilian_employed_population,
)
df_state_old = get_acs(
variables = my_var_list_old,
year = 2021,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2_lag = ratio_income_poverty_sub_0.5_lag +
ratio_income_poverty_0.5_0.99_lag + ratio_income_poverty_1_1.24_lag +
ratio_income_poverty_1.25_1.49_lag + ratio_income_poverty_1.5_1.84_lag +
ratio_income_poverty_1.85_1.99_lag,
share_pop_ratio_income_poverty_sub_2_lag = ratio_income_poverty_sub_2_lag/total_population_lag,
self_emp_rate_lag = (self_employed_men_unincorporated_lag + self_employed_women_unincorporated_lag)/civilian_employed_population_lag,
)
View(df_state_old)
View(df_state)
View(df_state_old)
View(df_state)
df_state = get_acs(
variables = my_var_list,
year = 2022,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2 = ratio_income_poverty_sub_0.5 +
ratio_income_poverty_0.5_0.99 + ratio_income_poverty_1_1.24 +
ratio_income_poverty_1.25_1.49 + ratio_income_poverty_1.5_1.84 +
ratio_income_poverty_1.85_1.99,
share_pop_ratio_income_poverty_sub_2 = ratio_income_poverty_sub_2/total_population,
self_emp_rate = (self_employed_men_unincorporated + self_employed_women_unincorporated)/civilian_employed_population,
) %>%
select(GEOID,
NAME,
share_pop_ratio_income_poverty_sub_2_lag,
self_emp_rate_lag)
df_state = get_acs(
variables = my_var_list,
year = 2022,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2 = ratio_income_poverty_sub_0.5 +
ratio_income_poverty_0.5_0.99 + ratio_income_poverty_1_1.24 +
ratio_income_poverty_1.25_1.49 + ratio_income_poverty_1.5_1.84 +
ratio_income_poverty_1.85_1.99,
share_pop_ratio_income_poverty_sub_2 = ratio_income_poverty_sub_2/total_population,
self_emp_rate = (self_employed_men_unincorporated + self_employed_women_unincorporated)/civilian_employed_population,
) %>%
select(GEOID,
NAME,
share_pop_ratio_income_poverty_sub_2,
self_emp_rate)
df_state_old = get_acs(
variables = my_var_list_old,
year = 2021,
geography = "puma",
survey = "acs1"
) %>%
pivot_wider(
id_cols = c(GEOID, NAME),
values_from = estimate,
names_from = variable
) %>%
mutate(ratio_income_poverty_sub_2_lag = ratio_income_poverty_sub_0.5_lag +
ratio_income_poverty_0.5_0.99_lag + ratio_income_poverty_1_1.24_lag +
ratio_income_poverty_1.25_1.49_lag + ratio_income_poverty_1.5_1.84_lag +
ratio_income_poverty_1.85_1.99_lag,
share_pop_ratio_income_poverty_sub_2_lag = ratio_income_poverty_sub_2_lag/total_population_lag,
self_emp_rate_lag = (self_employed_men_unincorporated_lag + self_employed_women_unincorporated_lag)/civilian_employed_population_lag,
) %>%
select(GEOID,
share_pop_ratio_income_poverty_sub_2_lag,
self_emp_rate_lag)
test <- inner_join(df_state,df_state_old)
View(test)
View(df_state)
View(df_state_old)
View(df_state)
View(df_state_old)
View(df_state)
View(df_state_old)
?tigris::pumas
library(tidycensus)
library(tidyverse)
age20 <- get_decennial(geography = "state",
variables = "P13_001N",
year = 2020,
sumfile = "dhc")
v17 <- load_variables(2022, "acs1", cache = TRUE)
View(v17)
?load_variables
vt <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "VT",
year = 2021)
View(vt)
vt <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
# state = "VT",
year = 2021)
View(vt)
nodes <- nodes %>%
filter(year == "2020 - 2021") %>% # We only want to keep the most recent year of data
mutate(agi_net = round(agi_net/1000000,2), # round AGI to the millions of dollars for ease of interpretation
node_size = abs(agi_net),
node_info = paste0(countyname, " ($",agi_net," M)"),
countyname_nostate = gsub("(.*),.*", "\\1", countyname),
statename  = gsub(".*, ", "", countyname))
##### Fix CT county LAT/LON
CT_counties <- tigris::counties(state = "CT") %>%
as.data.frame()%>%
select(NAMELSAD, INTPTLAT, INTPTLON) %>%
mutate(INTPTLAT = as.numeric(as.character(INTPTLAT)),
INTPTLON = as.numeric(as.character(INTPTLON)))
states <- tigris::states() %>%
as.data.frame() %>%
select(NAME, STUSPS) %>%
rename("statename_b" = "NAME",
"state_b_code" = "STUSPS")
shiny::runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
shiny::runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
shiny::runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
shiny::runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
shiny::runApp('C:/Users/Benjamin Glasner/Dropbox/GitHub/network-geography/IRS Data/Shiny')
# Economic Innovation Group
# Telework Analysis
# 11/2/2023
##########################
#         Set Up         #
##########################
library(dplyr)
library(readxl)
library(readr)
library(ipumsr)
library(janitor)
library(ggplot2)
#################
### Set paths ###
#################
# Define user-specific root folders
root_folders <- c("bglasner" = "C:/Users/bglasner/Dropbox/GitHub",
"bngla" = "C:/Users/bngla/Dropbox/GitHub",
"Benjamin Glasner" = "C:/Users/Benjamin Glasner/Dropbox/GitHub")
# Get current user
current_user <- Sys.info()[["user"]]
# Check if current user's root folder is defined
if (current_user %in% names(root_folders)) {
path_project <- root_folders[[current_user]]
} else {
stop("Root folder for current user is not defined.")
}
# Define paths
path_data <- file.path(path_project, "telework-ASEC-analysis", "Data")
path_output <- file.path(path_project, "telework-ASEC-analysis", "Output")
# Set working directory
setwd(path_data)
#################
### Data Load ###
#################
telework_microdata_CPS <- read_csv("telework_microdata_CPS.csv")
telework_microdata_CPS <- telework_microdata_CPS %>% clean_names()
cps_monthly_files <- read_csv("cps_monthly_files.csv")
cps_monthly_files <- cps_monthly_files %>%
clean_names()  %>%
select(serial, pernum, year, month, hrhhid ,hrhhid2, pulineno )
ddi <- read_ipums_ddi("cps_00026.xml")
data <- read_ipums_micro(ddi)
data <- data %>%
clean_names() %>%
# filter(year >=2023) %>%
select(-serial, -pernum) %>%
mutate(hrhhid = as.character(hrhhid)) %>%
rename(pulineno = lineno)
##################
### Data merge ###
##################
merged_data <- inner_join(cps_monthly_files, data) # merge ipums with census using hhrid hrhhid2 and pulineno (lineno)
merged_data <- inner_join(merged_data, telework_microdata_CPS) # merge census to telework using year month serial pernum
##################
### Save Data  ###
##################
save(merged_data, file = "CPS_telework.RData")
write.csv(merged_data, file = "CPS_telework.csv", row.names = FALSE)
table(merged_data$year, merged_data$month) # confirm that everything is March, 2023
monthly_respondent_worforce <- merged_data %>%
group_by(year, month) %>%
summarise(workers = sum(earnwt))
merged_data %>%
mutate(telework_factor = if_else(telework_any==1 & ahrsworkt>telework_hours,"Some Telework",
if_else(telework_any==1 & ahrsworkt==telework_hours,"All Telework", "No Telework"))) %>%
group_by(year, month, telework_factor) %>%
summarise(workers_diffany = sum(earnwt[diffany == 2]),
workers_diffcare = sum(earnwt[diffcare == 2]),
workers_diffhear = sum(earnwt[diffhear == 2]),
workers_diffeye = sum(earnwt[diffeye == 2]),
workers_diffrem = sum(earnwt[diffrem == 2]),
workers_diffphys = sum(earnwt[diffphys == 2]),
workers_diffmob = sum(earnwt[diffmob == 2])
) %>%
left_join(monthly_respondent_worforce) %>%
mutate(date = as.Date(paste0("1-",month,"-",year),tryFormats = c("%d-%m-%Y")),
workers_diffany = workers_diffany/workers) %>%
ggplot(aes(group = telework_factor,
color = telework_factor,
x = date,
y = workers_diffany)) +
geom_line() +
geom_point() +
ylab("Percent of the Respondent Workforce") +
xlab("Date") +
ggtitle("Workers with Disabilities") +
scale_y_continuous(limits = c(0,0.045),
labels = scales::percent_format()) +
theme_bw() +
guides(color = guide_legend(title = ""))
##########################
### Regression         ###
##########################
merged_data <- merged_data %>%
mutate(date = as.Date(paste0("1-",month,"-",year),tryFormats = c("%d-%m-%Y")),
telework_factor = if_else(telework_any==1 & ahrsworkt>telework_hours,"Some Telework",
if_else(telework_any==1 & ahrsworkt==telework_hours,"All Telework", "No Telework")),
fully_remote = as.integer(telework_factor == "All Telework"),
hybrid_remote = as.integer(telework_factor == "Some Telework"),
any_remote = as.integer(telework_any == 1),
diffany_bin = as.integer(diffany==2))
fully_remote = feols(fully_remote ~ diffany_bin | occ + ind, subset(merged_data,earnwt>0), weights = earnwt)
library(fixest)
fully_remote = feols(fully_remote ~ diffany_bin | occ + ind, subset(merged_data,earnwt>0), weights = earnwt)
fully_remote = feols(fully_remote ~ diffany_bin | occ + ind, subset(merged_data,earnwt>0), weights = merged_data$earnwt)
fully_remote = feols(fully_remote ~ diffany_bin | occ + ind, subset(merged_data,earnwt>0), weights = merged_data$earnwt[merged_data$earnwt>0])
hybrid_remote = feols(hybrid_remote ~ diffany_bin | occ + ind, subset(merged_data,earnwt>0), weights = merged_data$earnwt[merged_data$earnwt>0])
any_remote = feols(any_remote ~ diffany_bin | occ + ind, subset(merged_data,earnwt>0), weights = merged_data$earnwt[merged_data$earnwt>0])
etable(fully_remote, hybrid_remote, any_remote,
vcov = "twoway", headers = c("Fully Remote", "Hybrid Remote", "Any Remote"))
