<<<<<<< Updated upstream
geom_line() +
geom_point() +
ylab("Percent of the Respondent Workforce") +
xlab("Date") +
ggtitle("Workers with Disabilities") +
scale_y_continuous(limits = c(0,0.045),
labels = scales::percent_format()) +
theme_bw() +
guides(color = guide_legend(title = ""))
setwd(path_output)
png(filename = "Share of disabled workforce and telework.png",width =  850, height = 600)
plot(P)
dev.off()
###########################
### Regression Analysis ###
###########################
merged_data <- merged_data %>%
mutate(telework_factor = if_else(telework_any==1 & ahrsworkt>telework_hours,"Some Telework",
if_else(telework_any==1 & ahrsworkt==telework_hours,"All Telework", "No Telework")),
fully_remote = as.integer(telework_factor == "All Telework"),
hybrid_remote = as.integer(telework_factor == "Some Telework"),
any_remote = as.integer(telework_any == 1),
diffany_bin = as.integer(diffany==2)) %>%
filter(wtfinl > 0) %>%
filter(age>=22 & age<=64)
merged_data %>%
group_by(date,diffany) %>%
summarise(fully_remote_share = weighted.mean(fully_remote, w = wtfinl, rm.na = TRUE))
# Convert difficulty variables to binary format within the merged_data dataset
binary_difficulty_vars <- c("diffhear", "diffeye", "diffrem", "diffphys", "diffmob", "diffcare", "diffany")
for (var in binary_difficulty_vars) {
merged_data[[paste0(var, "_bin")]] <- as.integer(merged_data[[var]] == 2)
}
# Define the weights object for the feols
wtfinl <- merged_data$wtfinl
# Define a custom function to run feols with given dependent variable
baseline_feols <- function(dependent_variable, independent_variable_bin) {
feols(as.formula(paste(dependent_variable, "~", independent_variable_bin, "| occ2010 + ind1990")),
data = merged_data,
se = "cluster",
cluster = c("occ2010","ind1990"),
weights = wtfinl)
}
ind_info_feols <- function(dependent_variable, independent_variable_bin) {
feols(as.formula(paste(dependent_variable, "~", independent_variable_bin, "| occ2010 + ind1990 + race + sex + marst + educ + nchild + age")),
data = merged_data,
se = "cluster",
cluster = c("occ2010","ind1990"),
weights = wtfinl)
}
# Initialize lists to store models
any_baseline_models <- list()
any_indinfo_models <- list()
fully_baseline_models <- list()
fully_indinfo_models <- list()
hybrid_baseline_models <- list()
hybrid_indinfo_models <- list()
# Loop through each binary difficulty variable and run regressions
for (diff_var in binary_difficulty_vars) {
independent_var_bin <- paste0(diff_var, "_bin")
any_baseline_models[[diff_var]] <- baseline_feols("any_remote", independent_var_bin)
any_indinfo_models[[diff_var]] <- ind_info_feols("any_remote", independent_var_bin)
fully_baseline_models[[diff_var]] <- baseline_feols("fully_remote", independent_var_bin)
fully_indinfo_models[[diff_var]] <- ind_info_feols("fully_remote", independent_var_bin)
hybrid_baseline_models[[diff_var]] <- baseline_feols("hybrid_remote", independent_var_bin)
hybrid_indinfo_models[[diff_var]] <- ind_info_feols("hybrid_remote", independent_var_bin)
}
# Use etable to display results from the first variable as an example
result_table <- etable(any_baseline_models[[binary_difficulty_vars[7]]], any_indinfo_models[[binary_difficulty_vars[7]]],
fully_baseline_models[[binary_difficulty_vars[7]]], fully_indinfo_models[[binary_difficulty_vars[7]]],
hybrid_baseline_models[[binary_difficulty_vars[7]]], hybrid_indinfo_models[[binary_difficulty_vars[7]]],
cluster = c("occ2010","ind1990"),
headers = c("Any - Baseline","Any - Extended",
"Fully - Baseline","Fully - Extended",
"Hybrid - Baseline","Hybrid - Extended"
))
###########################
### Visual     Analysis ###
###########################
setwd(path_output)
# Step 1: Extract Coefficients and Confidence Intervals
outcome_list <- c("Deaf/Diff. Hearing", "Blind /Diff. Seeing",
"Cognitive Diff.", "Diff. Walking/Stairs",
"Diff. Activities Outside the Home", "Diff. Personal Needs",
"Any Difficulty")
plot_data <- list()
for(i in seq_along(any_baseline_models)){
plot_data[[i]] <- bind_rows(as.data.frame(any_baseline_models[[i]]$coeftable), as.data.frame(any_indinfo_models[[i]]$coeftable),
as.data.frame(fully_baseline_models[[i]]$coeftable), as.data.frame(fully_indinfo_models[[i]]$coeftable),
as.data.frame(hybrid_baseline_models[[i]]$coeftable), as.data.frame(hybrid_indinfo_models[[i]]$coeftable))
plot_data[[i]]$model <- c("Any - Baseline","Any - Extended",
"Fully - Baseline","Fully - Extended",
"Hybrid - Baseline","Hybrid - Extended"
)
plot_data[[i]]$reg <- c("Baseline","Extended",
"Baseline","Extended",
"Baseline","Extended"
)
plot_data[[i]]$type <- c("Any Remote","Any Remote",
"Fully Remote","Fully Remote",
"Hybrid Remote","Hybrid Remote"
)
plot_data[[i]]$dependent <- c(outcome_list[[i]],outcome_list[[i]],outcome_list[[i]],
outcome_list[[i]],outcome_list[[i]],outcome_list[[i]])
}
all_results <- bind_rows(plot_data)
all_results$dependent <- factor(all_results$dependent,
levels = c("Deaf/Diff. Hearing", "Blind /Diff. Seeing",
"Cognitive Diff.", "Diff. Walking/Stairs",
"Diff. Activities Outside the Home", "Diff. Personal Needs",
"Any Difficulty"))
all_results <- all_results %>%
filter(type != "Any Remote") %>%
arrange(dependent,model) %>%
mutate(row_num = row_number(),
conf.low = Estimate - 1.96*`Std. Error`,
conf.high = Estimate + 1.96*`Std. Error`)
# startpoints <- c(1,7,14,21,28,35,42)
midpoints <- tapply(all_results$row_num, all_results$dependent,
function(x) mean(range(x)))
ticktext <- unique(all_results$dependent)
P <- plot_ly(all_results,
x = ~row_num,
y = ~Estimate,
text = ~paste("Model Type:", model,
"<br>Dependent Variable Type:", dependent,
"<br>Effect Size:", round(Estimate,3),
"<br>t-value:", round(`t value`,3)),  # Custom hover text
hoverinfo = 'text',  # Display only the custom text
error_y = ~list(array = conf.high - Estimate,
arrayminus = Estimate - conf.low),
type = 'scatter',
mode = 'markers',
symbol = ~reg,
color = ~type ) %>%
layout(title = "The effect of Disabilities on Propensity to Telework",
xaxis = list(title = "",
tickmode = "array",
tickvals = midpoints,
ticktext = ticktext),
yaxis = list(title = "Coefficient Estimate"),
legend = list(title = list(text = 'Dependent Variable'))
)
P <- P %>%
layout(shapes = list(
list(
type = 'line',
line = list(
color = 'grey',
width = 2,
dash = 'dash'
=======
mode = "markers",
marker = list(
color = "white",
line = dict(color = "black"),
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Remote Share"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
line = list(color = "black"),
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Remote Share"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
>>>>>>> Stashed changes
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Remote Share"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
showlegend = F)
p
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
# Save the graph
htmlwidgets::saveWidget(
widget = p, #the plotly object
file = "Median Home Values vs Remote Work.html", #the path & file name
selfcontained = TRUE #creates a single html file
)
# Define user-specific root folders
root_folders <- c("bglasner" = "C:/Users/bglasner/Dropbox/GitHub",
"bngla" = "C:/Users/bngla/Dropbox/GitHub",
"Benjamin Glasner" = "C:/Users/Benjamin Glasner/Dropbox/GitHub",
"ericcarlson" = "/Users/ericcarlson/Dropbox/github")
# Get current user
current_user <- Sys.info()[["user"]]
# Check if current user's root folder is defined
if (current_user %in% names(root_folders)) {
path_project <- root_folders[[current_user]]
} else {
stop("Root folder for current user is not defined.")
}
# Define paths
path_data <- file.path(path_project, "telework-ASEC-analysis", "Data")
path_output <- file.path(path_project, "telework-ASEC-analysis", "Output")
# Set working directory
setwd(path_data)
df = read_csv("metro_housing_and_telework_rf.csv")
rm(list = ls())
library(tidyverse)
library(plotly)
theme_set(theme_bw())
# Define user-specific root folders
root_folders <- c("bglasner" = "C:/Users/bglasner/Dropbox/GitHub",
"bngla" = "C:/Users/bngla/Dropbox/GitHub",
"Benjamin Glasner" = "C:/Users/Benjamin Glasner/Dropbox/GitHub",
"ericcarlson" = "/Users/ericcarlson/Dropbox/github")
# Get current user
current_user <- Sys.info()[["user"]]
# Check if current user's root folder is defined
if (current_user %in% names(root_folders)) {
path_project <- root_folders[[current_user]]
} else {
stop("Root folder for current user is not defined.")
}
# Define paths
path_data <- file.path(path_project, "telework-ASEC-analysis", "Data")
path_output <- file.path(path_project, "telework-ASEC-analysis", "Output")
# Set working directory
setwd(path_data)
df = read_csv("metro_housing_and_telework_rf.csv")
df$fully_remote_condit = round(100*df$fully_remote_2022/df$any_remote_2022, 2)
df$pop_share_2022 = round(df$pop_share_2022, 2)
df = df %>%
mutate(`Median Home Value (2019)` = paste("$", median_home_value_2019, sep = ""),
`Fully Remote Share of All Remote Workers` = fully_remote_condit,
`Population Share` = pop_share_2022)
# Best fit line
fit = lm(fully_remote_condit ~ median_home_value_2019, data = df, weights = pop_share_2022)
fit_df = data.frame(median_home_value_2019 = df$median_home_value_2019,
fitted_values = predict(fit, newdata = df),
NAME = df$NAME,
fully_remote_condit = df$fully_remote_condit,
pop_share_2022 = df$pop_share_2022
)%>%
mutate(`Median Home Value (2019)` = paste("$", median_home_value_2019, sep = ""),
`Fully Remote Share of All Remote Workers` = fully_remote_condit,
`Population Share` = pop_share_2022)
fit_df = fit_df %>% arrange(median_home_value_2019)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1000*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
# Save the graph
setwd(path_output)
htmlwidgets::saveWidget(
widget = p, #the plotly object
file = "Median Home Values vs Remote Work.html", #the path & file name
selfcontained = TRUE #creates a single html file
)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1500*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
# Save the graph
setwd(path_output)
htmlwidgets::saveWidget(
widget = p, #the plotly object
file = "Median Home Values vs Remote Work.html", #the path & file name
selfcontained = TRUE #creates a single html file
)
df = df %>%
mutate(`Median Home Value (2019)` = paste("$", median_home_value_2019/1000, sep = ""),
`Fully Remote Share of All Remote Workers` = fully_remote_condit,
`Population Share` = pop_share_2022)
# Best fit line
fit = lm(fully_remote_condit ~ median_home_value_2019, data = df, weights = pop_share_2022)
fit_df = data.frame(median_home_value_2019 = df$median_home_value_2019,
fitted_values = predict(fit, newdata = df),
NAME = df$NAME,
fully_remote_condit = df$fully_remote_condit,
pop_share_2022 = df$pop_share_2022
)%>%
mutate(`Median Home Value (2019)` = paste("$", median_home_value_2019/1000, sep = ""),
`Fully Remote Share of All Remote Workers` = fully_remote_condit,
`Population Share` = pop_share_2022)
fit_df = fit_df %>% arrange(median_home_value_2019)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1500*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019, Thousands):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1500*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
df = read_csv("metro_housing_and_telework_rf.csv")
df$fully_remote_condit = round(100*df$fully_remote_2022/df$any_remote_2022, 2)
df$pop_share_2022 = round(df$pop_share_2022, 2)
df = df %>%
mutate(`Median Home Value (2019)` = paste("$", median_home_value_2019, sep = ""),
`Fully Remote Share of All Remote Workers` = fully_remote_condit,
`Population Share` = pop_share_2022)
# Best fit line
fit = lm(fully_remote_condit ~ median_home_value_2019, data = df, weights = pop_share_2022)
fit_df = data.frame(median_home_value_2019 = df$median_home_value_2019,
fitted_values = predict(fit, newdata = df),
NAME = df$NAME,
fully_remote_condit = df$fully_remote_condit,
pop_share_2022 = df$pop_share_2022
)%>%
mutate(`Median Home Value (2019)` = paste("$", median_home_value_2019, sep = ""),
`Fully Remote Share of All Remote Workers` = fully_remote_condit,
`Population Share` = pop_share_2022)
fit_df = fit_df %>% arrange(median_home_value_2019)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1500*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers:", fully_remote_condit,
"<br>Median Home Value (2019):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
# Save the graph
setwd(path_output)
htmlwidgets::saveWidget(
widget = p, #the plotly object
file = "Median Home Values vs Remote Work.html", #the path & file name
selfcontained = TRUE #creates a single html file
)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1500*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers (%):", fully_remote_condit,
"<br>Median Home Value (2019):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
# Save the graph
setwd(path_output)
htmlwidgets::saveWidget(
widget = p, #the plotly object
file = "Median Home Values vs Remote Work.html", #the path & file name
selfcontained = TRUE #creates a single html file
)
p = plot_ly(
data = df,
x = ~median_home_value_2019/1000,
y = ~fully_remote_condit,
type = "scatter",
mode = "markers",
marker = list(
color = "white",
size = ~1500*pop_share_2022),
text = ~paste(
"MSA:", NAME,
"<br>Fully Remote Share of All Remote Workers (%):", fully_remote_condit,
"<br>Median Home Value (2019):", `Median Home Value (2019)`,
sep = " "
),
hoverinfo = "text"
) %>%
add_lines(
x = ~median_home_value_2019/1000,
y = ~fitted_values,
line = list(color = "firebrick", dash = "dash"),
hoverinfo = "none",
data = fit_df,
inherit = F) %>%
layout(xaxis = list(title = "Median Home Value 2019 (Thousands)"),
yaxis = list(title = "Fully Remote Share of All Remote Workers (%)"),
title = "Median Home Value vs Remote Share",
showlegend = F)
p
# Save the graph
setwd(path_output)
htmlwidgets::saveWidget(
widget = p, #the plotly object
file = "Median Home Values vs Remote Work.html", #the path & file name
selfcontained = TRUE #creates a single html file
)
View(all_results)
View(all_results)
((0.107+0.0424106554) - 0.107)/0.107
View(all_results)
((0.107+0.0501521161) - 0.107)/0.107
# Economic Innovation Group
# Telework Analysis
# 11/2/2023
##########################
#         Set Up         #
##########################
library(dplyr)
library(readxl)
library(ggplot2)
library(plotly)
library(ipumsr)
library(fixest)
# https://cran.r-project.org/web/packages/fixest/vignettes/fixest_walkthrough.html#13_Other_standard-errors
#################
### Set paths ###
#################
# Define user-specific root folders
root_folders <- c("bglasner" = "C:/Users/bglasner/Dropbox/GitHub",
"bngla" = "C:/Users/bngla/Dropbox/GitHub",
"Benjamin Glasner" = "C:/Users/Benjamin Glasner/Dropbox/GitHub")
# Get current user
current_user <- Sys.info()[["user"]]
# Check if current user's root folder is defined
if (current_user %in% names(root_folders)) {
path_project <- root_folders[[current_user]]
} else {
stop("Root folder for current user is not defined.")
}
# Define paths
path_data <- file.path(path_project, "telework-ASEC-analysis", "Data")
path_output <- file.path(path_project, "telework-ASEC-analysis", "Output")
# Set working directory
setwd(path_data)
#################
### Data Load ###
#################
load("CPS_telework_ASEC.RData")
#########################
### Describe the data ###
#########################
merged_data <- merged_data %>%
mutate(date = as.Date(paste0("1-",month,"-",year),tryFormats = c("%d-%m-%Y")),
moved = as.integer(migrate1 %in% c(2:6)),
moved_in_county = as.integer(migrate1 == 3),
moved_out_county = as.integer(migrate1 %in% c(4:6)))
merged_data %>%
group_by(date) %>%
summarise(count = n())
##########################
### Trends in the data ###
##########################
telework_hh <- merged_data %>%
mutate(full_remote = as.integer(telework_any==1 & ahrsworkt==telework_hours),
hybrid_remote = as.integer(telework_any==1 & ahrsworkt>telework_hours),
any_remote = as.integer(telework_any==1),
remote_hours = if_else(telework_hours>0, telework_hours, 0)) %>%
group_by(serial) %>%
summarize(household_work_hours = sum(ahrsworkt),
household_remote_hours = sum(remote_hours),
num_full_remote = sum(full_remote),
num_hybrid = sum(hybrid_remote),
full_remote = mean(full_remote),
any_remote = mean(any_remote),
num_workers = n(),
share_hybrid = num_hybrid/num_workers,
share_full = num_full_remote/num_workers,
share_remote_hours = household_remote_hours/household_work_hours) %>%
mutate(household_remote_type = case_when(
full_remote == 1  ~ "Fully Remote Household",
any_remote >0 & full_remote < 1 ~ "Partially Remote Household",
any_remote ==0  ~ "Not a Remote Household",
TRUE ~ "Missing"
)) %>%
select(serial,household_remote_type,
num_workers,num_hybrid,num_full_remote,
share_hybrid,share_full,share_remote_hours)
merged_data %>%
left_join(telework_hh) %>%
group_by(household_remote_type) %>%
summarise(moved_count = sum(moved),
moved = weighted.mean(moved,w = asecwt, na.rm = TRUE))
###########################
### Regression Analysis ###
###########################
analysis_data <- merged_data %>%
left_join(telework_hh) %>%
filter(asecwt > 0) %>%
filter(age >= 22 & age <= 64) %>%
mutate(telework_factor = if_else(telework_any==1 & ahrsworkt>telework_hours,"Some Telework",
if_else(telework_any==1 & ahrsworkt==telework_hours,"All Telework", "No Telework")))
analysis_data %>%
group_by(telework_factor) %>%
summarise(count = n())
analysis_data %>%
group_by(age) %>%
summarise(count = n()) %>%
ggplot(aes(x = age,
y = count,
size = count)) +
geom_point() +
theme_bw()
analysis_data %>%
# group_by(moved) %>%
# group_by(moved_in_county) %>%
group_by(moved_out_county) %>%
summarise(count = n())
# analysis_data <- merged_data %>%
#   left_join(telework_hh) %>%
#   filter(asecwth > 0) %>%
# mutate(telework_factor = if_else(telework_any==1 & ahrsworkt>telework_hours,"Some Telework",
# if_else(telework_any==1 & ahrsworkt==telework_hours,"All Telework", "No Telework"))) %>%
#   arrange(serial,pernum) %>%
#   group_by(serial) %>%
#   slice(1)
analysis_data$household_remote_type <- factor(analysis_data$household_remote_type, levels = c("Not a Remote Household","Partially Remote Household","Fully Remote Household"))
analysis_data$telework_factor <- factor(analysis_data$telework_factor, levels = c("No Telework","Some Telework","All Telework"))
# Convert moving variables to binary format within the analysis_data dataset
# binary_moving_vars <- c("household_remote_type + num_workers")
binary_moving_vars <- c("telework_factor + num_workers")
# Define the weights object for the feols
# asecwth <- analysis_data$asecwth
asecwth <- analysis_data$asecwt
# Define a custom function to run feols with given dependent variable
baseline_feols <- function(dependent_variable, independent_variable_bin) {
feols(as.formula(paste(dependent_variable, "~", independent_variable_bin, "| occ2010 + ind1990")),
data = analysis_data,
se = "cluster",
cluster = c("serial"),
weights = asecwth[asecwth > 0])
}
ind_info_feols <- function(dependent_variable, independent_variable_bin) {
feols(as.formula(paste(dependent_variable, "~", independent_variable_bin, "| occ2010 + ind1990 + race + sex + marst + educ + nchild + age")),
data = analysis_data,
se = "cluster",
cluster = c("serial"),
weights = asecwth[asecwth > 0])
}
# Initialize lists to store models
any_baseline_models <- list()
any_indinfo_models <- list()
in_county_baseline_models <- list()
in_county_indinfo_models <- list()
out_county_baseline_models <- list()
out_county_indinfo_models <- list()
# Loop through each binary moving variable and run regressions
for (diff_var in binary_moving_vars) {
independent_var_bin <- paste0(diff_var)
any_baseline_models[[diff_var]] <- baseline_feols("moved", independent_var_bin)
any_indinfo_models[[diff_var]] <- ind_info_feols("moved", independent_var_bin)
in_county_baseline_models[[diff_var]] <- baseline_feols("moved_in_county", independent_var_bin)
in_county_indinfo_models[[diff_var]] <- ind_info_feols("moved_in_county", independent_var_bin)
out_county_baseline_models[[diff_var]] <- baseline_feols("moved_out_county", independent_var_bin)
out_county_indinfo_models[[diff_var]] <- ind_info_feols("moved_out_county", independent_var_bin)
}
# Use etable to display results from the first variable as an example
result_table <- etable(any_baseline_models[[binary_moving_vars[1]]], any_indinfo_models[[binary_moving_vars[1]]],
in_county_baseline_models[[binary_moving_vars[1]]], in_county_indinfo_models[[binary_moving_vars[1]]],
out_county_baseline_models[[binary_moving_vars[1]]], out_county_indinfo_models[[binary_moving_vars[1]]],
# se = "cluster",
# cluster = c("serial"),
headers = c("Moved - Baseline","Moved - Extended",
"Within County - Baseline","Within County - Extended",
"Out of County - Baseline","Out of County - Extended"
),
tex = FALSE
)
###########################
### Visual     Analysis ###
###########################
setwd(path_output)
# Step 1: Extract Coefficients and Confidence Intervals
all_results <- bind_rows(as.data.frame(any_baseline_models[[1]]$coeftable[1:2,]), as.data.frame(any_indinfo_models[[1]]$coeftable[1:2,]),
as.data.frame(in_county_baseline_models[[1]]$coeftable[1:2,]), as.data.frame(in_county_indinfo_models[[1]]$coeftable[1:2,]),
as.data.frame(out_county_baseline_models[[1]]$coeftable[1:2,]), as.data.frame(out_county_indinfo_models[[1]]$coeftable[1:2,]))
all_results$household_type <- c("Partially Remote","Fully Remote",
"Partially Remote","Fully Remote",
"Partially Remote","Fully Remote",
"Partially Remote","Fully Remote",
"Partially Remote","Fully Remote",
"Partially Remote","Fully Remote"
)
all_results$model <- c("Moved - Baseline","Moved - Baseline",
"Moved - Extended","Moved - Extended",
"Within County - Baseline","Within County - Baseline",
"Within County - Extended","Within County - Extended",
"Out of County - Baseline","Out of County - Baseline",
"Out of County - Extended","Out of County - Extended"
)
all_results$reg <- c("Baseline","Baseline",
"Extended","Extended",
"Baseline","Baseline",
"Extended","Extended",
"Baseline","Baseline",
"Extended","Extended"
)
all_results$type <- c("Any Move","Any Move",
"Any Move","Any Move",
"Within County","Within County",
"Within County","Within County",
"Out of County","Out of County",
"Out of County","Out of County"
)
all_results <- all_results %>%
# filter(type != "Any") %>%
arrange(type,household_type) %>%
mutate(row_num = row_number(),
conf.low = Estimate - 1.96*`Std. Error`,
conf.high = Estimate + 1.96*`Std. Error`)
# startpoints <- c(1,5,9)
midpoints <- tapply(all_results$row_num, all_results$type,
function(x) mean(range(x)))
ticktext <- unique(all_results$type)
P <- plot_ly(all_results,
x = ~row_num,
y = ~Estimate,
text = ~paste("Model Type:", model,
"<br>Household Type:", household_type,
"<br>Effect Size:", round(Estimate,3),
"<br>t-value:", round(`t value`,3)),  # Custom hover text
hoverinfo = 'text',  # Display only the custom text
error_y = ~list(array = conf.high - Estimate,
arrayminus = Estimate - conf.low),
type = 'scatter',
mode = 'markers',
symbol = ~reg,
color = ~household_type ) %>%
layout(title = "The effect of Remote Work on Propensity to Move",
xaxis = list(title = "",
tickmode = "array",
tickvals = midpoints,
ticktext = ticktext),
yaxis = list(title = "Coefficient Estimate"),
legend = list(title = list(text = 'Dependent Variable'))
)
P <- P %>%
layout(shapes = list(
list(
type = 'line',
line = list(
color = 'grey',
width = 2,
dash = 'dash'
),
x0 = 4.5,
x1 = 4.5,
y0 = min(all_results$conf.low),  # Replace with the minimum y-value you want the line to start at
y1 = max(all_results$conf.high)  # Replace with the maximum y-value you want the line to end at
),
list(
type = 'line',
line = list(
color = 'grey',
width = 2,
dash = 'dash'
),
x0 = 8.5,
x1 = 8.5,
y0 = min(all_results$conf.low),  # Replace with the minimum y-value you want the line to start at
y1 = max(all_results$conf.high)  # Replace with the maximum y-value you want the line to end at
)
))
P
analysis_data %>%
# group_by(moved) %>%
# group_by(moved_in_county) %>%
group_by(moved_out_county) %>%
summarise(count = n())
analysis_data %>%
# group_by(moved) %>%
# group_by(moved_in_county) %>%
group_by(moved_out_county) %>%
summarise(count = n(),
avg = weighted.mean(moved_out_county, asecwt))
analysis_data %>%
# group_by(moved) %>%
# group_by(moved_in_county) %>%
# group_by(moved_out_county) %>%
summarise(
# count = n(),
avg = weighted.mean(moved_out_county, asecwt))
((0.0481 + 0.017)/0.0481)
((0.0481 + 0.017) - 0.0481)/0.0481
View(result_table)
